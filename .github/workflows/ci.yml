name: Django CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: requirements.txt
      - name: Verify requirements.txt exists
        run: >
          ls -la

          if [ -f requirements.txt ]; then cat requirements.txt; else echo
          "Error: requirements.txt not found"; exit 1; fi
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create static directory
        run: |
          mkdir -p myapp/static
      - name: Apply Migrations
        run: |
          python manage.py makemigrations --check
          python manage.py migrate
      - name: Collect Static Files
        run: |
          python manage.py collectstatic --noinput
      - name: Run Tests
        run: |
          python manage.py test
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 60s
          debug: true
          script: >
            echo "Deploying to ${{ secrets.EC2_HOST }}"

            whoami

            if [ ! -d ~/myproject ]; then echo "Error: ~/myproject does not
            exist"; exit 1; fi

            cd ~/myproject

            git pull origin main || { echo "Git pull failed"; exit 1; }

            source venv/bin/activate || { echo "Virtualenv activation failed";
            exit 1; }

            pip install -r requirements.txt || { echo "Pip install failed"; exit
            1; }

            python manage.py migrate || { echo "Migration failed"; exit 1; }

            python manage.py collectstatic --noinput || { echo "Collectstatic
            failed"; exit 1; }

            sudo systemctl restart gunicorn || { echo "Gunicorn restart failed";
            exit 1; }

            sudo systemctl restart nginx || { echo "Nginx restart failed"; exit
            1; }

            sudo journalctl -u gunicorn -n 50 --no-pager

            sudo journalctl -u nginx -n 50 --no-pager

